/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.aria.dialogue.managers.utils;

import hmi.flipper.editor.istree.ISTreeModel;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.TreePath;

/**
 *
 * @author Siewart
 */
public class ISInspectorGui extends javax.swing.JFrame implements Observer{
    ISInspectorController controller;
    
    boolean autoupdate = false;

    @Override
    public synchronized void update(Observable o, Object arg) {
        if(o == controller){
            if(autoupdate){
                updateTree((ISTreeModel) arg);
            }
        }
    }

    /**
     * Creates new form ISInspectorGui
     * @param controller Controller this GUI is observing
     */
    private ISInspectorGui(ISInspectorController controller){
        this.controller = controller;
        initComponents();
        autoUpdateISToggle.setSelected(autoupdate);
    }
    private static HashMap<ISInspectorController, ISInspectorGui> instances = new HashMap<>();

    
    /**
     * 
     * @param controller the controller for which this instance will be/was created.
     * @return return an previous or new instance of the gui
     */
    public synchronized static ISInspectorGui getInstance(ISInspectorController controller){
        ISInspectorGui inst = instances.get(controller);
        if( inst == null){
            inst = createNewInstance(controller);
            instances.put(controller, inst);
        }
        return inst;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        isTree = new javax.swing.JTree();
        updateISButton = new javax.swing.JButton();
        autoUpdateISToggle = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Information State");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("userstate");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("utterance");
        javax.swing.tree.DefaultMutableTreeNode treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("text");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("consumed");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("timestamp");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("intention : longPause");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("agentstate");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("utterance");
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("text");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("consumed");
        treeNode3.add(treeNode4);
        treeNode4 = new javax.swing.tree.DefaultMutableTreeNode("timestamp");
        treeNode3.add(treeNode4);
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        isTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(isTree);

        updateISButton.setText("Update IS Now");
        updateISButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                updateISButtonStateChanged(evt);
            }
        });

        autoUpdateISToggle.setText("Auto-Update IS");
        autoUpdateISToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoUpdateISToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(updateISButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 396, Short.MAX_VALUE)
                        .addComponent(autoUpdateISToggle)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateISButton)
                    .addComponent(autoUpdateISToggle)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void autoUpdateISToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoUpdateISToggleActionPerformed
        if(autoUpdateISToggle.isSelected()){
            autoupdate = true;
        }else{
            autoupdate = false;
        }
    }//GEN-LAST:event_autoUpdateISToggleActionPerformed

    private void updateISButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_updateISButtonStateChanged
        ISTreeModel tree = controller.getISTreeModel();
        updateTree(tree);
    }//GEN-LAST:event_updateISButtonStateChanged
    
    private void updateTree(ISTreeModel is){
        isTree.setModel(is);
        for( int i=0; i<is.getChildCount(is.getRoot()); i++ ) {
            expandNode(isTree, is, new TreePath(is.getRoot()), is.getChild(is.getRoot(), i));
        }
    }
    
    private void expandNode(JTree tree, ISTreeModel model, TreePath parent, Object item)
    {
        TreePath path = parent.pathByAddingChild(item);
        if( model.isLeaf(item) ) {
            tree.collapsePath(path);
            tree.expandPath(path);
        } else {
            tree.collapsePath(path);
            tree.expandPath(path);
            for( int i=0; i<model.getChildCount(item); i++ ) {
                expandNode(tree, model, parent.pathByAddingChild(item), model.getChild(item, i));
            }
        }
    }
    
    private static ISInspectorGui createNewInstance(ISInspectorController controller) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ISInspectorGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Holder<ISInspectorGui> result = new Holder();
        try {
            /* Create and display the form */
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                @Override
                public void run() {
                    result.setValue(new ISInspectorGui(controller));
                    result.getValue().setVisible(true);
                }
            });
        } catch (InterruptedException | InvocationTargetException ex) {
            Logger.getLogger(ISInspectorGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result.getValue();
    }
    private static class Holder<T>{
        private T value;

        public T getValue() {
            return value;
        }

        public void setValue(T value) {
            this.value = value;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoUpdateISToggle;
    private javax.swing.JTree isTree;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton updateISButton;
    // End of variables declaration//GEN-END:variables
}
